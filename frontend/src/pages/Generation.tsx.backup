import React, { useState, useEffect } from 'react';
import { agentsAPI } from '../services/agentsAPI';
import { Sparkles, Loader, Zap, Heart, ThumbsDown, Eye, ArrowRight, Bot, Brain } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import CommandBar from '../components/CommandBar';

const Generation: React.FC = () => {
  const navigate = useNavigate();
  const [description, setDescription] = useState('');
  const [loading, setLoading] = useState(false);
  const [generatedImages, setGeneratedImages] = useState<any[]>([]);
  const [model, setModel] = useState('google-imagen');
  const [imageCount, setImageCount] = useState(2);
  const [suggestedPrompts, setSuggestedPrompts] = useState<string[]>([]);
  const [useAIAgents, setUseAIAgents] = useState(true);
  const [styleProfile, setStyleProfile] = useState<any>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  
  // Get userId from localStorage or use a default
  const currentUser = localStorage.getItem('currentUser');
  const userId = currentUser ? JSON.parse(currentUser).id : 'guest-user';
  
  const models = [
    { id: 'google-imagen', name: 'Google Imagen 4 Ultra', description: 'Highest quality, best for fashion' },
    { id: 'stable-diffusion-xl', name: 'Stable Diffusion XL', description: 'Fast and cost-effective' },
    { id: 'openai-dalle3', name: 'DALL-E 3', description: 'Creative and artistic' }
  ];

  // Load prompt suggestions and style profile
  useEffect(() => {
    const loadPromptSuggestions = async () => {
      try {
        // Try to load existing style profile from localStorage
        const savedProfile = localStorage.getItem('aiStyleProfile');
        if (savedProfile) {
          setStyleProfile(JSON.parse(savedProfile));
        }
        
        // Get user portfolio summary from localStorage or API
        const portfolioSummary = localStorage.getItem('portfolioSummary');
        
        if (portfolioSummary) {
          const summary = JSON.parse(portfolioSummary);
          const prompts = generatePromptSuggestions(summary);
          setSuggestedPrompts(prompts);
        } else {
          // Default suggestions
          setSuggestedPrompts([
            'Elegant minimalist dress with clean lines and flowing fabric',
            'Modern structured blazer with contemporary tailoring',
            'Casual summer outfit with light, breathable materials',
            'Sophisticated evening wear with luxurious details'
          ]);
        }
      } catch (error) {
        console.error('Failed to load prompt suggestions:', error);
      }
    };
    
    loadPromptSuggestions();
  }, []);

  const generatePromptSuggestions = (summary: any) => {
    const prompts: string[] = [];
    
    // Extract dominant styles and garment types
    const dominantColors = summary.dominantColors?.slice(0, 2) || [];
    const garmentTypes = summary.garmentTypeDistribution?.slice(0, 3).map((g: any) => g.type) || [];
    const silhouettes = summary.silhouettes || [];
    
    // Generate personalized prompts
    if (garmentTypes.length > 0) {
      prompts.push(`${garmentTypes[0]} with ${dominantColors[0] || 'neutral'} tones and elegant draping`);
    }
    if (silhouettes.length > 0) {
      prompts.push(`${silhouettes[0]} silhouette ${garmentTypes[1] || 'garment'} with modern details`);
    }
    if (dominantColors.length > 1) {
      prompts.push(`Contemporary design featuring ${dominantColors[0]} and ${dominantColors[1]} color palette`);
    }
    
    // Add exploration prompt
    prompts.push(`Experimental ${garmentTypes[0] || 'fashion'} piece with innovative construction`);
    
    return prompts.filter(p => p.length > 0).slice(0, 4);
  };

  const analyzeStyleProfile = async () => {
    setIsAnalyzing(true);
    try {
      // Get some portfolio images for analysis
      const portfolioImages = JSON.parse(localStorage.getItem('portfolioImages') || '[]');
      if (portfolioImages.length === 0) {
        alert('Please upload some portfolio images first for AI style analysis!');
        return;
      }
      
      const imageUrls = portfolioImages.slice(0, 5).map((img: any) => img.url);
      const analysis = await agentsAPI.analyzePortfolio('designer-001', imageUrls);
      
      setStyleProfile(analysis.profile_data);
      localStorage.setItem('aiStyleProfile', JSON.stringify(analysis.profile_data));
      
      // Update suggestions based on AI analysis
      if (analysis.profile_data) {
        const profile = analysis.profile_data;
        const aiPrompts = [
          `${profile.aesthetic_profile?.primary_style || 'Contemporary'} fashion design with your signature style`,
          `${profile.signature_elements?.silhouettes?.[0] || 'Elegant'} silhouette in your preferred color palette`,
          `Innovative garment inspired by your ${profile.aesthetic_profile?.primary_style || 'unique'} portfolio`,
          `Modern interpretation of your classic ${profile.aesthetic_profile?.primary_style || 'aesthetic'} style`
        ];
        setSuggestedPrompts(aiPrompts);
      }
      
      alert('✨ AI style analysis complete! Now generating personalized suggestions.');
    } catch (error) {
      console.error('Style analysis failed:', error);
      alert('AI analysis temporarily unavailable. Using fallback generation.');
      setUseAIAgents(false);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleGenerate = async (count: number = 10) => {
    if (!description.trim()) {
      alert('Please provide a description for image generation');
      return;
    }

    setLoading(true);
    try {
      console.log('🎨 Starting image generation...', { count, description, userId, useAIAgents });

      // Use AI Agents for all generation
      const result = await agentsAPI.generateImage('designer-001', description, { 
        mode: useAIAgents && styleProfile ? 'specific' : 'batch',
        quantity: count 
      });
      
      if (result.success && result.results?.results && result.results.results.length > 0) {
        const newImages = result.results.results.map((genImg: any, idx: number) => ({
          id: `gen-${Date.now()}-${idx}`,
          url: genImg.image_url,
          prompt: description,
          tags: useAIAgents && styleProfile ? ['personalized'] : ['generated'],
          metadata: { 
            aiGenerated: true, 
            styleProfile: styleProfile?.designer_id,
            model: genImg.category
          }
        }));
        
        setGeneratedImages(prev => [...newImages, ...prev]);
        
        // Save to localStorage for Home page
        const existing = JSON.parse(localStorage.getItem('generatedImages') || '[]');
        localStorage.setItem('generatedImages', JSON.stringify([...newImages, ...existing]));
        
        alert(`✨ Generated ${newImages.length} images!`);
      } else {
        throw new Error('No images were generated');
      }
    } catch (error: any) {
      console.error('❌ Generation error:', error);
      const errorMessage = error.response?.data?.error || error.message || 'Generation failed';
      alert(`Generation failed: ${errorMessage}. Please try again.`);
    } finally {
      setLoading(false);
    }
  };

  const getStyleBasedPrompt = () => {
    // Get user portfolio summary to generate contextual prompt
    try {
      const portfolioSummary = localStorage.getItem('portfolioSummary');
      if (portfolioSummary) {
        const summary = JSON.parse(portfolioSummary);
        const dominantColors = summary.dominantColors || [];
        const garmentTypes = summary.garmentTypeDistribution?.map((g: any) => g.type) || [];
        const aesthetic = summary.dominantAesthetic || 'contemporary';
        
        // Generate prompt based on user's style
        if (garmentTypes.length > 0 && dominantColors.length > 0) {
          return `${aesthetic} ${garmentTypes[0]} designs featuring ${dominantColors[0]} tones with elegant modern aesthetic`;
        } else if (garmentTypes.length > 0) {
          return `${aesthetic} ${garmentTypes[0]} designs with modern styling and clean lines`;
        }
      }
    } catch (error) {
      console.error('Failed to generate style-based prompt:', error);
    }
    
    // Fallback to generic fashion prompt
    return 'elegant minimalist fashion designs with contemporary aesthetic and clean lines';
  };

  const quickBatches = [
    { count: 10, label: 'Quick Test', description: '10 images' },
    { count: 50, label: 'Standard Batch', description: '50 images' },
    { count: 100, label: 'Large Batch', description: '100 images' },
  ];

  const handleCommand = async (command: string) => {
    setDescription(command);
    
    // Parse command for count
    const generateMatch = command.toLowerCase().match(/(make|generate|create)\s+(\d+)\s+(.*)/i);
    if (generateMatch) {
      const count = parseInt(generateMatch[2]);
      await handleGenerate(count);
    } else {
      await handleGenerate(10);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Generate Designs</h1>
        <p className="mt-2 text-sm text-gray-600">
          Use AI to create new fashion designs based on your style
        </p>
      </div>

      {/* AI Agents Configuration */}
      <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-6 border border-purple-100">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <Bot className="h-6 w-6 text-purple-600" />
            <div>
              <h3 className="text-lg font-semibold text-gray-900">AI Agents Mode</h3>
              <p className="text-sm text-gray-600">Personalized generation using your style profile</p>
            </div>
          </div>
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={useAIAgents}
              onChange={(e) => setUseAIAgents(e.target.checked)}
              className="sr-only"
            />
            <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
              useAIAgents ? 'bg-purple-600' : 'bg-gray-300'
            }`}>
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                useAIAgents ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </div>
          </label>
        </div>
        
        {useAIAgents && !styleProfile && (
          <div className="bg-white rounded-lg p-4 border border-purple-200">
            <div className="flex items-center gap-3 mb-3">
              <Brain className="h-5 w-5 text-purple-600" />
              <span className="font-medium text-gray-900">Style Profile Required</span>
            </div>
            <p className="text-sm text-gray-600 mb-4">Analyze your portfolio to create a personalized style profile for AI generation.</p>
            <button
              onClick={analyzeStyleProfile}
              disabled={isAnalyzing}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 transition-all flex items-center gap-2"
            >
              {isAnalyzing ? (
                <Loader className="h-4 w-4 animate-spin" />
              ) : (
                <Brain className="h-4 w-4" />
              )}
              {isAnalyzing ? 'Analyzing...' : 'Analyze My Style'}
            </button>
          </div>
        )}
        
        {useAIAgents && styleProfile && (
          <div className="bg-white rounded-lg p-4 border border-green-200">
            <div className="flex items-center gap-2 mb-2">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span className="font-medium text-green-800">Style Profile Active</span>
            </div>
            <p className="text-sm text-green-700">AI will generate designs based on your {styleProfile?.aesthetic_profile?.primary_style || 'unique'} style profile.</p>
          </div>
        )}
      </div>

      {/* AI Suggested Prompts */}
      {suggestedPrompts.length > 0 && (
        <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-xl p-6 border border-indigo-100">
          <div className="flex items-center gap-2 mb-3">
            <Sparkles className="h-5 w-5 text-anatomie-accent" />
            <h3 className="text-lg font-semibold text-gray-900">
              {styleProfile ? 'AI Personalized Prompts' : 'Suggested Prompts'}
            </h3>
          </div>
          <p className="text-sm text-gray-600 mb-4">
            {styleProfile 
              ? 'Generated based on your AI-analyzed style profile' 
              : 'Based on your portfolio and style preferences'
            }
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {suggestedPrompts.map((prompt, index) => (
              <button
                key={index}
                onClick={() => setDescription(prompt)}
                className="text-left p-3 bg-white rounded-lg border border-gray-200 hover:border-anatomie-accent hover:shadow-md transition-all group"
              >
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-700 group-hover:text-anatomie-accent">{prompt}</span>
                  <ArrowRight className="h-4 w-4 text-gray-400 group-hover:text-anatomie-accent" />
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Quick Batch Options */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {quickBatches.map((batch) => (
          <button
            key={batch.count}
            onClick={() => {
              const stylePrompt = getStyleBasedPrompt();
              setDescription(stylePrompt);
              setImageCount(batch.count);
              handleGenerate(batch.count);
            }}
            disabled={loading}
            className="bg-white rounded-xl shadow-sm hover:shadow-lg transition-all p-6 text-left border-2 border-gray-200 hover:border-anatomie-accent group disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="flex items-center justify-between mb-3">
              <Zap className="h-8 w-8 text-anatomie-accent" />
              <span className="text-2xl font-bold text-gray-900">{batch.count}</span>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-1">{batch.label}</h3>
            <p className="text-sm text-gray-500">{batch.description}</p>
            <div className="mt-4 space-y-1">
              <p className="text-xs text-gray-400">
                Est. time: ~{Math.ceil(batch.count / 10)} min
              </p>
              <p className="text-xs text-anatomie-accent font-medium">
                Based on your style profile
              </p>
            </div>
          </button>
        ))}
      </div>

      {/* Manual Input */}
      <div className="bg-white shadow-sm rounded-xl p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Custom Generation</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description *
            </label>
            <textarea
              rows={3}
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-anatomie-accent focus:border-transparent"
              placeholder="Describe your vision: elegant minimalist dress with clean lines..."
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                AI Model
              </label>
              <select
                value={model}
                onChange={(e) => setModel(e.target.value)}
                className="block w-full border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-anatomie-accent focus:border-transparent"
              >
                {models.map((m) => (
                  <option key={m.id} value={m.id}>
                    {m.name}
                  </option>
                ))}
              </select>
              <p className="mt-1 text-xs text-gray-500">
                {models.find(m => m.id === model)?.description}
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Number of Images: {imageCount}
              </label>
              <input
                type="range"
                min="1"
                max="10"
                value={imageCount}
                onChange={(e) => setImageCount(parseInt(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-anatomie-accent"
              />
              <div className="flex justify-between text-xs text-gray-500 mt-1">
                <span>1</span>
                <span>5</span>
                <span>10</span>
              </div>
            </div>
          </div>

          <button
            onClick={() => handleGenerate(imageCount)}
            disabled={loading || !description}
            className="w-full flex items-center justify-center px-4 py-3 text-sm font-medium rounded-lg text-white bg-anatomie-accent hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
          >
            {loading ? (
              <>
                <Loader className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate Images
              </>
            )}
          </button>
        </div>
      </div>

      {/* Generation Progress */}
      {loading && (
        <div className="bg-white shadow-sm rounded-xl p-8">
          <div className="text-center">
            <Loader className="h-12 w-12 text-anatomie-accent mx-auto animate-spin mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Generating Your Designs</h3>
            <p className="text-sm text-gray-600">This may take a few minutes...</p>
          </div>
        </div>
      )}

      {/* Generated Images Preview */}
      {generatedImages.length > 0 && (
        <div className="bg-white shadow-sm rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                Generated Images ({generatedImages.length})
              </h3>
              <p className="text-sm text-gray-600 mt-1">Rate these images or view them in your gallery</p>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => navigate('/gallery')}
                className="px-4 py-2 text-sm font-medium text-anatomie-accent border border-anatomie-accent rounded-lg hover:bg-anatomie-accent hover:text-white transition-all"
              >
                View in Gallery
              </button>
              <button
                onClick={() => setGeneratedImages([])} 
                className="text-sm text-gray-500 hover:text-gray-700 px-3"
              >
                Clear
              </button>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {generatedImages.map((img, index) => (
              <div key={index} className="bg-gray-50 rounded-xl overflow-hidden border border-gray-200 hover:shadow-lg transition-all">
                <div className="relative aspect-square">
                  <img
                    src={img.url}
                    alt={`Generated ${index + 1}`}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute top-2 right-2 bg-black/50 text-white text-xs px-2 py-1 rounded">
                    #{index + 1}
                  </div>
                </div>
                <div className="p-4">
                  <p className="text-sm text-gray-700 mb-3 line-clamp-2">{img.prompt}</p>
                  <div className="flex gap-2">
                    <button
                      className="flex-1 flex items-center justify-center gap-2 px-3 py-2 text-sm bg-green-50 text-green-700 rounded-lg hover:bg-green-100 transition-all"
                      title="Like this design"
                    >
                      <Heart className="h-4 w-4" />
                      Like
                    </button>
                    <button
                      className="flex-1 flex items-center justify-center gap-2 px-3 py-2 text-sm bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-all"
                      title="Dislike this design"
                    >
                      <ThumbsDown className="h-4 w-4" />
                      Dislike
                    </button>
                    <button
                      onClick={() => navigate('/gallery')}
                      className="px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all"
                      title="View in gallery"
                    >
                      <Eye className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Command Bar for Voice/Text Input */}
      <CommandBar onCommandExecute={handleCommand} />
    </div>
  );
};

export default Generation;
